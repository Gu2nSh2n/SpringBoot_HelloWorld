<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.atguigu.springboot</groupId>
	<artifactId>Springboot_HelloWorld</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<name>Springboot_HelloWorld</name>
	<url>http://maven.apache.org</url>

	<!-- 公共spring-boot配置，下面依赖jar文件不用在写版本号 -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<!-- 自动包含以下信息： -->
		<!-- 1.使用Java6编译级别 -->
		<!-- 2.使UTF-8编码 -->
		<!-- 3.实现了通用的测试框架 (JUnit, Hamcrest, Mockito). -->
		<!-- 4.智能资源过滤 -->
		<!-- 5.智能的插件配置(exec plugin, surefire, Git commit ID, shade). -->
		<artifactId>spring-boot-starter-parent</artifactId>
		<!-- spring boot 1.x最后稳定版本 -->
		<version>1.4.1.RELEASE</version>
		<!-- 表示父模块pom的相对路径，这里没有值 -->
		<relativePath />
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>

		<!-- web -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- 测试 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<!-- 只在test测试里面运行 -->
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- tomcat 的支持. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- 热启动在正常开发项目中已经很常见了吧，虽然平时开发web项目过程中，改动项目启重启总是报错； 但springBoot对调试支持很好，修改之后可以实时生效，需要添加以下的配置： 
			该模块在完整的打包环境下运行的时候会被禁用。如果你使用java -jar启动应用或者用一个特定的classloader启动， 它会认为这是一个“生产环境”。 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- 配置数据库jpa 的使用 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>

	<!-- 1、什么是WebJars？WebJars是将客户端（浏览器）资源（JavaScript，Css等） 打成jar包文件， 以对资源进行统一依赖管理。
		 2、WebJars的jar包部署在Maven中央仓库上。 我们在开发Java web项目的时候会使用像Maven，
		 Gradle等构建工具以实现对jar包版本依赖管理， 以及项目的自动化管理，
		 但是对于JavaScript，Css等前端资源包，我们只能采用拷贝到webapp下的方式，这样做就无法对这些资源进行依赖管理。 
		 那么WebJars就提供给我们这些前端资源的jar包形势，我们就可以进行依赖管理。 
		3、WebJars主官网 查找对于的组件，比如Vuejs\ 
		4、页面引入 <link th:href="@{/webjars/bootstrap/3.3.6/dist/css/bootstrap.css}" rel="stylesheet"></link> -->
		<dependency>
			<groupId>org.webjars.bower</groupId>
			<artifactId>vue</artifactId>
			<version>1.0.21</version>
		</dependency>

		<!-- redis配置 -->
		<dependency>  
		    <groupId>org.springframework.boot</groupId>  
		    <artifactId>spring-boot-starter-redis</artifactId>  
		</dependency>
		<!-- thymeleaf模板 -->
		 <dependency>
	      <groupId>org.springframework.boot</groupId>
	      <artifactId>spring-boot-starter-thymeleaf</artifactId>
	     </dependency>
			
		<!-- Mybatis 整合boot -->
		<dependency>
		    <groupId>org.mybatis.spring.boot</groupId>
		    <artifactId>mybatis-spring-boot-starter</artifactId>
		    <version>1.1.1</version>
		</dependency>
		
		<!-- 发送邮件 -->
		  <dependency> 
	        <groupId>org.springframework.boot</groupId>
	        <artifactId>spring-boot-starter-mail</artifactId>
	    </dependency> 
		
		<!-- shiro 
			需要配置thymeleaf的环境；
			thymeleaf的配置是为了去掉html的校验
		-->
		 <dependency>
            <groupId>net.sourceforge.nekohtml</groupId>
            <artifactId>nekohtml</artifactId>
            <version>1.9.22</version>
        </dependency>
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-spring</artifactId>
            <version>1.4.0</version>
        </dependency>
	</dependencies>

	<build>
		<finalName>Springboot_HelloWorld</finalName>
		<plugins>
			<!-- jdk编译插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin </artifactId>
				<configuration>
					<fork>true</fork>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>